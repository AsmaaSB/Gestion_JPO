/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import beans.Evenement;
import beans.InscriptionEvenement;
import beans.Participant;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import services.EvenementService;
import services.ParticipantService;
import services.InscriptionEvenementService;

/**
 *
 * @author PC
 */
public class InscriptionParEvenement extends javax.swing.JInternalFrame {

    private DefaultTableModel tableModel;
    private DefaultComboBoxModel<Evenement> comboModel;

    private EvenementService es;
    private InscriptionEvenementService ies;
    private ParticipantService ps;
    private DefaultTableModel model;

    /**
     * Creates new form GestionInscriptions
     */
    public InscriptionParEvenement() {
        initComponents();
        this.setTitle("Inscriptions par Evenement");
        es = new EvenementService();
        ies = new InscriptionEvenementService();
        ps = new ParticipantService();
        comboModel = (DefaultComboBoxModel<Evenement>) listEvenement.getModel();
        comboModel = (DefaultComboBoxModel<Evenement>) listParticipant.getModel();
        tableModel = (DefaultTableModel) table.getModel();
        model = tableModel;
        model = (DefaultTableModel) table.getModel();

        loadEvenements();
        loadParticipants();
        load();
    }

    void loadEvenements() {
        listEvenement.addItem("veuillez choisissez un événement");
        for (Evenement e : es.findAll()) {
            listEvenement.addItem(e);
        }
    }

    void loadParticipants() {
        listParticipant.addItem("veuillez choisissez un participant");
        for (Participant p : ps.findAll()) {
            listParticipant.addItem(p);
        }
    }

    public void load() {
        if (model == null) {
            model = (DefaultTableModel) table.getModel();
        }

        model.setRowCount(0);
        for (InscriptionEvenement ie : ies.findAll()) {
            model.addRow(new Object[]{
                ie.getEvenement().getNom(),
                ie.getParticipant().getNom(),});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        listParticipant = new javax.swing.JComboBox();
        addBn = new javax.swing.JButton();
        listEvenement = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        jTextField1.setText("jTextField1");

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gestion des inscriptions ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("Participant :");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Événement :");

        listParticipant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listParticipantActionPerformed(evt);
            }
        });

        addBn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addBn.setForeground(new java.awt.Color(0, 0, 204));
        addBn.setText("Ajouter");
        addBn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBnActionPerformed(evt);
            }
        });

        listEvenement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listEvenementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listEvenement, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listParticipant, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(416, 416, 416)
                        .addComponent(addBn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(317, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(listParticipant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(listEvenement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addComponent(addBn)
                .addGap(30, 30, 30))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Participant", "Événement"
            }
        ));
        jScrollPane2.setViewportView(table);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listParticipantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listParticipantActionPerformed
        // TODO add your handling code here:
        model.setRowCount(0);
        if (listParticipant.getSelectedIndex() != 0) {
            Participant selectedParticipant = (Participant) listParticipant.getSelectedItem();
            for (InscriptionEvenement ic : ies.findByEvenement(selectedParticipant)) {
                model.addRow(new Object[]{
                    ic.getEvenement().getNom(),
                    ic.getParticipant().getNom()
                });
            }
        }
    }//GEN-LAST:event_listParticipantActionPerformed

    private void listEvenementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listEvenementActionPerformed
        // TODO add your handling code here:
      

        model.setRowCount(0);
        if (listEvenement.getSelectedIndex() != 0) {
            Evenement selectedEvenement = (Evenement) listEvenement.getSelectedItem();
            for (InscriptionEvenement ie : ies.findByEvenement(selectedEvenement)) {
                model.addRow(new Object[]{
                    ie.getEvenement().getNom(),
                    ie.getParticipant().getNom()
                });
            }
        }
    }//GEN-LAST:event_listEvenementActionPerformed

    private void addBnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBnActionPerformed
        // TODO add your handling code here:
        if (listParticipant.getSelectedIndex() > 0 && listEvenement.getSelectedIndex() > 0) {
        Participant selectedParticipant = (Participant) listParticipant.getSelectedItem();
        Evenement selectedEvenement = (Evenement) listEvenement.getSelectedItem();
        
        // Create and save new inscription
        InscriptionEvenement newInscription = new InscriptionEvenement();
        newInscription.setParticipant(selectedParticipant);
        newInscription.setEvenement(selectedEvenement);
        
        if (ies.create(newInscription)) {
            // Add to table
            model.addRow(new Object[]{
                selectedParticipant.getNom(),
                selectedEvenement.getNom()
            });
            
            // Optional: Reset selections
            listParticipant.setSelectedIndex(0);
            listEvenement.setSelectedIndex(0);
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Erreur lors de l'ajout de l'inscription", 
                "Erreur", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    } else {
        javax.swing.JOptionPane.showMessageDialog(this, 
            "Veuillez sélectionner un participant et un événement", 
            "Avertissement", 
            javax.swing.JOptionPane.WARNING_MESSAGE);
    }
       
    }//GEN-LAST:event_addBnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox listEvenement;
    private javax.swing.JComboBox listParticipant;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private void loadEvenemnts() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
